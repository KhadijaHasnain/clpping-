#########################################################################################
#	In questo file vengono riportate tutte le query che vengono eseguite		#
#########################################################################################

# Query di login
LOGIN = SELECT userid, roleid FROM users WHERE user_name = ?

###			INIZIO QUERIES USERS			###
# Queries relative agli users
INSERT_USER = INSERT INTO users (userid, roleid, user_name) VALUES (NULL, ?, ?)
INSERT_USER_AREA = INSERT INTO user_area (userid, areaid) VALUES (?, ?)
INSERT_USER_COUNTRY = INSERT INTO user_country (userid, countryid) VALUES (?, ?)
UPDATE_USER = UPDATE users SET roleid = ?, user_name = ? WHERE userid = ?
DELETE_USER = DELETE FROM users WHERE userid = ?
DELETE_USER_AREA = DELETE FROM user_area WHERE userid = ?
DELETE_USER_COUNTRY = DELETE FROM user_country WHERE userid = ?
SELECT_USER = SELECT userid, roleid, user_name FROM users WHERE userid = ? 
SELECT_USER_AREA = SELECT areaid FROM user_area WHERE userid = ?
SELECT_USER_COUNTRIES = SELECT user_country.countryid AS countryid, areaid FROM user_country,country WHERE user_country.countryid = country.countryid AND userid = ?
SELECT_END_USERS_SEARCHED = SELECT distinct users.userid AS userid, roleid, user_name FROM users, user_country, country WHERE users.userid = user_country.userid AND user_country.countryid = country.countryid #CONDITION# ORDER BY user_name
###			FINE QUERIES USERS			###

###			INIZIO QUERIES COUNTRIES		###
# Queries relative ai countries
INSERT_COUNTRY = INSERT INTO country (countryid, country, areaid, description) VALUES (NULL, ?, ?, ?)
UPDATE_COUNTRY = UPDATE country SET country = ?, areaid = ?, description = ? WHERE countryid = ?
DELETE_COUNTRY = DELETE FROM country WHERE countryid = ?
SELECT_COUNTRY_USERS = SELECT userid FROM user_country WHERE countryid = ?
SELECT_COUNTRY_PUBLICATIONS = SELECT publicationid FROM publications WHERE countryid = ?
SELECT_COUNTRY_DETAILS = SELECT countryid, country, areaid, description FROM country WHERE countryid = ?
SELECT_COUNTRIES_SEARCHED = SELECT countryid, country, areaid, description FROM country WHERE countryid IS NOT NULL #CONDITION# ORDER BY areaid, country, description
SELECT_COUNTRY_EXISTS = SELECT country FROM country WHERE UPPER(country) = UPPER(?) AND countryid != ? AND areaid = ?
###			FINE QUERIES COUNTRIES			###

###			INIZIO QUERIES CLIPPINGS		###
# Queries relative ai clipping
INSERT_CLIPPING = INSERT INTO clippings (clippingid, publicationid, eventid, lengthid, toneid, graphicid, coverid, fieldstoryid, title, datepublished, score, lengthscore) VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
UPDATE_CLIPPING = UPDATE clippings SET publicationid = ?, eventid = ?, lengthid = ?, toneid = ?, graphicid = ?, coverid = ?, fieldstoryid = ?, title = ?, datepublished = ?, score = ?, lengthscore = ? WHERE clippingid = ?
DELETE_CLIPPING = DELETE FROM clippings WHERE clippingid = ?
SELECT_CLIPPING_DETAILS = SELECT publicationid, eventid, lengthid, toneid, graphicid, coverid, fieldstoryid, title, date_format(datepublished, "%Y%m%d") AS datepublished, score, lengthscore FROM clippings WHERE clippingid = ?
SELECT_CLIPPINGS_SEARCHED = SELECT clippingid, clippings.publicationid, eventid, lengthid, toneid, graphicid, coverid, fieldstoryid, title, date_format(datepublished, "%Y%m%d") AS datepublished, score, lengthscore, area.area_code, country.country_code FROM clippings, publications JOIN area ON publications.areaid = area.areaid LEFT JOIN country ON publications.countryid = country.countryid WHERE publications.publicationid = clippings.publicationid #CONDITION#
#ORDER BY datepublished DESC, title
#LIMIT 0, 3000
SELECT_CLIPPINGS_XLS = SELECT clippingid, events.eventtitle, lengths.length, tones.tone, graphics.graphic, cover.cover, fieldstories.fieldstory, title, date_format(datepublished, "%Y%m%d") AS datepublished, score, lengthscore, area.area_code, country.country_code, area.areaid, country.countryid, publications.name, audience.audience, levels.level, sizes.size, frequencies.frequency, medium.medium FROM clippings LEFT JOIN events ON clippings.eventid = events.eventid JOIN lengths ON clippings.lengthid = lengths.lengthid JOIN tones ON clippings.toneid = tones.toneid JOIN graphics ON clippings.graphicid = graphics.graphicid JOIN cover ON clippings.coverid = cover.coverid LEFT JOIN fieldstories ON clippings.fieldstoryid = fieldstories.fieldstoryid JOIN publications ON publications.publicationid = clippings.publicationid JOIN area ON publications.areaid = area.areaid LEFT JOIN country ON publications.countryid = country.countryid JOIN audience ON publications.audienceid = audience.audienceid JOIN levels ON publications.levelid = levels.levelid JOIN sizes ON publications.sizeid = sizes.sizeid JOIN frequencies ON publications.frequencyid = frequencies.frequencyid JOIN medium ON publications.mediumid = medium.mediumid WHERE 1=1 #CONDITION#
SELECT_CLIPPINGS = SELECT clippingid, title, date_format(datepublished, "%Y%m%d") AS datepublished, score, area.area_code, country.country_code, publications.name AS name, audience.audience FROM clippings JOIN publications ON publications.publicationid = clippings.publicationid JOIN area ON publications.areaid = area.areaid LEFT JOIN country ON publications.countryid = country.countryid  JOIN audience ON publications.audienceid = audience.audienceid WHERE 1=1 #CONDITION#
SELECT_CLIPPING_EXISTS = SELECT clippingid FROM clippings WHERE publicationid = ? AND UPPER(title) = UPPER(?) AND date_format(datepublished, "%Y%m%d") = ? AND clippingid != ?
# Queries per il calcolo dello score
SELECT_LENGTH_AUDIENCE_VALUE = SELECT length_audience_value FROM length_audience WHERE lengthid = ? AND audienceid = ? 
SELECT_LEVEL_VALUE = SELECT level_value FROM levels WHERE levelid = ?
SELECT_TONE_VALUE = SELECT tone_value FROM tones WHERE toneid = ?
SELECT_GRAPHIC_VALUE = SELECT graphic_value FROM graphics WHERE graphicid = ?
SELECT_LEVEL_SIZE_VALUE = SELECT level_size_value FROM level_size WHERE levelid = ? AND sizeid = ?
###			FINE QUERIES CLIPPINGS			###

###			INIZIO QUERIES PUBLICATIONS		###
# Queries relative alle publications
INSERT_PUBLICATION = INSERT INTO publications (publicationid, name, last_rated, description, status, audienceid, levelid, sizeid, frequencyid, mediumid, areaid, countryid) VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
UPDATE_PUBLICATION = UPDATE publications SET name = ?, last_rated = ?, description = ?, status = ?, audienceid = ?, levelid = ?, sizeid = ?, frequencyid = ?, mediumid = ?, areaid = ?, countryid = ? WHERE publicationid = ?
DELETE_PUBLICATION = DELETE FROM publications WHERE publicationid = ?
UPDATE_PUBLICATION_STATUS = UPDATE publications SET status = ? WHERE publicationid IN (#CONDITION#)
SELECT_PUBLICATION_CLIPPINGS = SELECT clippingid FROM clippings WHERE publicationid = ?
SELECT_PUBLICATION_CONTACTS = SELECT contactid FROM contacts WHERE publicationid = ?
SELECT_PUBLICATION_DETAILS = SELECT name, date_format(last_rated, "%Y%m%d") AS last_rated, description, status, audienceid, levelid, sizeid, frequencyid, mediumid, areaid, countryid FROM publications WHERE publicationid = ?
SELECT_PUBLICATIONS_SEARCHED = SELECT publicationid, name, date_format(last_rated, "%Y%m%d") AS last_rated, description, status, audienceid, levelid, sizeid, frequencyid, mediumid, areaid, countryid FROM publications WHERE publicationid IS NOT NULL #CONDITION# ORDER BY last_rated DESC, areaid, countryid, name
SELECT_PUBLICATIONS_NOT_ARCHIVED = SELECT publicationid, name FROM publications WHERE status = 0 #CONDITION# ORDER BY name
SELECT_PUBLICATIONS_NOT_ARCHIVED_AREA_NOT_NULL = SELECT publicationid, name FROM publications WHERE areaid IS NOT NULL AND status = 0 #CONDITION# ORDER BY name
SELECT_PUBLICATION_EXISTS = SELECT publicationid FROM publications WHERE UPPER(name) = UPPER(?) AND areaid = ? AND date_format(last_rated, "%Y%m%d") = ? AND publicationid != ?
###			FINE QUERIES PUBLICATIONS		###

###			INIZIO QUERIES EVENTS			###
# Queries relative agli events
INSERT_EVENT = INSERT INTO events (eventid, areaid, eventtypeid, eventtitle, eventdate, prref, productorsubject) VALUES (NULL, ?, ?, ?, ?, ?, ?)
UPDATE_EVENT = UPDATE events SET areaid = ?, eventtypeid = ?, eventtitle = ?, eventdate = ?, prref = ?, productorsubject = ? WHERE eventid = ?
DELETE_EVENT = DELETE FROM events WHERE eventid = ?
SELECT_EVENT_CLIPPINGS = SELECT clippingid FROM clippings WHERE eventid = ?
SELECT_EVENT_DETAILS = SELECT eventid, areaid, eventtypeid, eventtitle, date_format(eventdate, "%Y%m%d") AS eventdate, prref, productorsubject FROM events WHERE eventid = ?
SELECT_EVENTS_SEARCHED = SELECT eventid, areaid, eventtypeid, eventtitle, date_format(eventdate, "%Y%m%d") AS eventdate, prref, productorsubject FROM events WHERE eventid IS NOT NULL #CONDITION# ORDER BY eventdate DESC, areaid, eventtypeid
SELECT_EVENT_EXISTS = SELECT eventid FROM events WHERE areaid = ? AND eventtypeid = ? AND UPPER(eventtitle) = UPPER(?) AND date_format(eventdate, "%Y%m%d") = ? AND eventid != ?
###			FINE QUERIES EVENTS			###

###			INIZIO QUERIES REPORTS			###
# Queries relative ai New Text Reports
SELECT_MEDIA = SELECT publications.mediumid AS id, medium AS name, year(datepublished) AS year, month(datepublished) AS month, quarter(datepublished) AS quarter, count(clippingid) AS total, round(sum(score)) AS points FROM clippings, publications, medium WHERE clippings.publicationid = publications.publicationid AND publications.mediumid = medium.mediumid AND publications.mediumid IS NOT NULL #CONDITION#
SELECT_PUBLICATION = SELECT clippings.publicationid AS id, name AS name, year(datepublished) AS year, month(datepublished) AS month, quarter(datepublished) AS quarter, count(clippingid) AS total, round(sum(score)) AS points FROM clippings, publications WHERE clippings.publicationid = publications.publicationid #CONDITION#
SELECT_FIELDSTORY = SELECT clippings.fieldstoryid AS id, fieldstory AS name, year(datepublished) AS year, month(datepublished) AS month, quarter(datepublished) AS quarter, count(clippingid) AS total, round(sum(score)) AS points FROM clippings, publications, fieldstories WHERE clippings.publicationid = publications.publicationid AND fieldstories.fieldstoryid = clippings.fieldstoryid AND clippings.fieldstoryid IS NOT NULL #CONDITION#
SELECT_LEVELOFPRESS = SELECT publications.levelid AS id, level AS name, year(datepublished) AS year, month(datepublished) AS month, quarter(datepublished) AS quarter, count(clippingid) AS total, round(sum(score)) AS points FROM clippings, publications, levels WHERE clippings.publicationid = publications.publicationid AND levels.levelid = publications.levelid #CONDITION#
SELECT_RELEASE = SELECT clippings.eventid AS id, eventtitle AS name, year(eventdate) AS year, month(eventdate) AS month, quarter(eventdate) AS quarter, count(clippingid) AS total, round(sum(score)) AS points FROM clippings, events WHERE clippings.eventid = events.eventid #CONDITION#
# Query relativa a Text Reports e Important Titles Reports
SELECT_REPORT = SELECT DISTINCT name, date_format(datepublished, "%Y%m%d") AS datepublished, title, score, toneid, areaid, audienceid, mediumid, eventid FROM clippings, publications WHERE clippings.publicationid = publications.publicationid #CONDITION# ORDER BY areaid, score DESC
# Queries relative ai Graphic Reports
SELECT_NUMBER_OF_CLIPPINGS = SELECT publications.audienceid AS id, audience AS name, year(datepublished) AS year, month(datepublished) AS month, count(clippingid) AS total FROM clippings, publications, audience WHERE clippings.publicationid = publications.publicationid AND publications.audienceid = audience.audienceid AND publications.audienceid IS NOT NULL #CONDITION#
SELECT_NUMBER_OF_POINTS = SELECT publications.audienceid AS id, audience AS name, year(datepublished) AS year, month(datepublished) AS month, sum(score) AS total FROM clippings, publications, audience WHERE clippings.publicationid = publications.publicationid AND publications.audienceid = audience.audienceid AND publications.audienceid IS NOT NULL #CONDITION#
SELECT_TREND = SELECT sum(score) AS total FROM clippings, publications WHERE clippings.publicationid = publications.publicationid #CONDITION#
###			FINE QUERIES REPORTS			###

###			INIZIO QUERIES PRODUCTS			###
# Queries relative ai products
INSERT_PRODUCT = INSERT INTO products (productid, areaid, partnumberorname, description, status) VALUES (NULL, ?, ?, ?, ?)
UPDATE_PRODUCT = UPDATE products SET areaid = ?, partnumberorname = ?, description = ?, status = ? WHERE productid = ?
DELETE_PRODUCT = DELETE FROM products WHERE productid = ?
UPDATE_PRODUCT_STATUS = UPDATE products SET status = ? WHERE productid IN (#CONDITION#)
SELECT_PRODUCT_CLIPPINGS = SELECT clippingid FROM clippings WHERE productid = ?
SELECT_PRODUCT_DETAILS = SELECT productid, areaid, partnumberorname, description, status FROM products WHERE productid = ?
SELECT_PRODUCTS_SEARCHED = SELECT productid, areaid, partnumberorname, description, status FROM products WHERE productid IS NOT NULL #CONDITION# ORDER BY areaid, partnumberorname, description
SELECT_PRODUCT_EXISTS = SELECT productid FROM products WHERE UPPER(partnumberorname) = UPPER(?) AND areaid = ? AND productid != ?
###			FINE QUERIES PRODUCTS			###

###			INIZIO QUERIES DIVISIONS			###
# Queries relative alle divisions
INSERT_DIVISION = INSERT INTO divisions (divisionid, areaid, name, description, status) VALUES (NULL, ?, ?, ?, ?)
UPDATE_DIVISION = UPDATE divisions SET areaid = ?, name = ?, description = ?, status = ? WHERE divisionid = ?
DELETE_DIVISION = DELETE FROM divisions WHERE divisionid = ?
UPDATE_DIVISION_STATUS = UPDATE divisions SET status = ? WHERE divisionid IN (#CONDITION#)
SELECT_DIVISION_CLIPPINGS = SELECT divisionid FROM clippings WHERE divisionid = ?
SELECT_DIVISION_DETAILS = SELECT divisionid, areaid, name, description, status FROM divisions WHERE divisionid = ?
SELECT_DIVISIONS_SEARCHED = SELECT divisionid, areaid, name, description, status FROM divisions WHERE divisionid IS NOT NULL #CONDITION# ORDER BY areaid, name, description
SELECT_DIVISION_EXISTS = SELECT divisionid FROM divisions WHERE areaid = ? AND UPPER(name) = UPPER(?) AND divisionid != ?
###			FINE QUERIES DIVISION			###

###			INIZIO QUERIES CONTACTS			###
# Queries relative ai contacts
INSERT_CONTACT = INSERT INTO contacts (contactid, publicationid, general, firstname, lastname, specifics, address, city, state, postalcode, country, workphone, faxnumber, emailname, contacttype, lastmeetingdate, note, contactbyphone, contactbyemail, geographic_region) VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
UPDATE_CONTACT = UPDATE contacts SET publicationid = ?, general = ?, firstname = ?, lastname = ?, specifics = ?, address = ?, city = ?, state = ?, postalcode = ?, country = ?, workphone = ?, faxnumber = ?, emailname = ?, contacttype = ?, lastmeetingdate = ?, note = ?, contactbyphone = ?, contactbyemail = ?, geographic_region = ? WHERE contactid = ?
DELETE_CONTACT = DELETE FROM contacts WHERE contactid = ?
SELECT_CONTACT_DETAILS = SELECT publicationid, general, firstname, lastname, specifics, address, city, state, postalcode, country, workphone, faxnumber, emailname, contacttype, date_format(lastmeetingdate, "%Y%m%d") AS lastmeetingdate, note, contactbyphone, contactbyemail, geographic_region FROM contacts WHERE contactid = ?
SELECT_CONTACTS_SEARCHED = SELECT contactid, publicationid, general, firstname, lastname, specifics, address, city, state, postalcode, country, workphone, faxnumber, emailname, contacttype, date_format(lastmeetingdate, "%Y%m%d") AS lastmeetingdate, note, contactbyphone, contactbyemail, geographic_region FROM contacts WHERE contactid IS NOT NULL #CONDITION# ORDER BY lastname
SELECT_CONTACT_EXISTS = SELECT contactid FROM contacts WHERE publicationid = ? AND UPPER(lastname) = UPPER(?) AND contactid != ?
###			FINE QUERIES CONTACTS			###

###			INIZIO QUERIES UTILITA'			###
# Queries di utilita' generale
SELECT_AREAS = SELECT areaid, area, description FROM area WHERE areaid IS NOT NULL #CONDITION# ORDER BY area
SELECT_TYPES = SELECT eventtypeid, eventtypes.order, description FROM eventtypes ORDER BY eventtypes.order
SELECT_ROLES = SELECT roleid, role, description FROM roles ORDER BY role
SELECT_PUBLICATIONS = SELECT publicationid, name FROM publications WHERE areaid IS NOT NULL #CONDITION# ORDER BY name
SELECT_EVENTS = SELECT eventid, eventtitle FROM events WHERE areaid IS NOT NULL #CONDITION# ORDER BY eventtitle
SELECT_AUDIENCES = SELECT audience, audience.order, audienceid FROM audience ORDER BY audience.order
SELECT_LEVELS = SELECT level, levels.order, levelid FROM levels ORDER BY levels.order
SELECT_SIZES = SELECT size, sizes.order, sizeid FROM sizes ORDER BY sizes.order
SELECT_FREQUENCIES = SELECT frequency, frequencies.order, frequencyid FROM frequencies ORDER BY frequencies.order
SELECT_MEDIUM = SELECT medium, medium.order, mediumid FROM medium ORDER BY medium.order
SELECT_FIELDSTORIES = SELECT fieldstory, fieldstories.order, fieldstoryid FROM fieldstories ORDER BY fieldstories.order
SELECT_LENGTHS = SELECT length, lengths.order, lengthid FROM lengths ORDER BY lengths.order
SELECT_TONES = SELECT tone, tones.order, toneid FROM tones ORDER BY tones.order
SELECT_GRAPHICS = SELECT graphic, graphics.order, graphicid FROM graphics ORDER BY graphics.order
SELECT_COVERS = SELECT cover, cover.order, coverid FROM cover ORDER BY cover.order
SELECT_SECTIONS = SELECT sectionid, name FROM section ORDER BY name

SELECT_COUNTRIES_FOR_ADMIN_SEARCH = SELECT country, countryid FROM country WHERE areaid = ? ORDER BY country
SELECT_COUNTRIES_BY_AREA = SELECT country, countryid, (SELECT COUNT(*) FROM user_country WHERE user_country.countryid=country.countryid AND user_country.userid != ?) AS used FROM country WHERE areaid = ? ORDER BY country
SELECT_COUNTRIES_BY_AREA_LIST = SELECT country, country_code, countryid, area FROM country JOIN area ON country.areaid = area.areaid WHERE 1=1 #CONDITION# ORDER BY area, country
SELECT_COUNTRIES_BY_COUNTRIES = SELECT country, countryid, (SELECT COUNT(*) FROM user_country WHERE user_country.countryid=country.countryid AND user_country.userid != ?) AS used FROM country WHERE countryid IN (#CONDITION#) ORDER BY country
SELECT_USER_BY_USERNAME = SELECT user_name FROM users WHERE user_name = ? AND userid != ?

SELECT_AREA_DESCRIPTION = SELECT area FROM area WHERE areaid = ?
SELECT_MEDIUM_DESCRIPTION = SELECT medium FROM medium WHERE mediumid = ?
SELECT_FIELDSTORY_DESCRIPTION = SELECT fieldstory FROM fieldstories WHERE fieldstoryid = ?
SELECT_LENGTH_DESCRIPTION = SELECT length FROM lengths WHERE lengthid = ?
SELECT_TONE_DESCRIPTION = SELECT tone FROM tones WHERE toneid = ?
SELECT_GRAPHIC_DESCRIPTION = SELECT graphic FROM graphics WHERE graphicid = ?
SELECT_COVER_DESCRIPTION = SELECT cover FROM cover WHERE coverid = ?
SELECT_TYPE_DESCRIPTION = SELECT description FROM eventtypes WHERE eventtypeid = ?
SELECT_ROLE_DESCRIPTION = SELECT role FROM roles WHERE roleid = ?
SELECT_AUDIENCE_DESCRIPTION = SELECT audience FROM audience WHERE audienceid = ?
SELECT_COUNTRY_DESCRIPTION = SELECT country FROM country WHERE countryid = ?
SELECT_PUBLICATION_DESCRIPTION = SELECT name FROM publications WHERE publicationid = ?
SELECT_DIVISION_DESCRIPTION = SELECT name FROM divisions WHERE divisionid = ?
SELECT_EVENT_DESCRIPTION = SELECT eventtitle FROM events WHERE eventid = ?
SELECT_PRODUCT_DESCRIPTION = SELECT partnumberorname FROM products WHERE productid = ?
SELECT_SECTION_DESCRIPTION = SELECT name FROM section WHERE sectionid = ?
###			FINE QUERIES UTILITA'			###